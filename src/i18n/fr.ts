export default {
  giveStar: "Si vous pensez que Canyon est encore bon, donnez-nous des",
  logo: {
    desc: "Solution de couverture de code JavaScript",
  },
  systemTitle: "üöÄ Mod√®le de d√©marrage Nextra",
  banner: {
    title: "üëã Salut, bienvenue dans le mod√®le de d√©marrage Next.js!",
    more: "En savoir plus",
  },
  badgeTitle: "L√©ger, pr√™t √† l'emploi üéâ",
  text1: "Canyon vous rend plus",
  text2: "Par",
  select: {
    language: "S√©lectionner une langue",
  },
  advantages: ["Simple", "Rapide", "Pr√©cis"],
  toCollectCovData: "Collecter les donn√©es de couverture",
  features: "Caract√©ristiques",
  customers: "Qui utilise",
  lookMoreCustomers: "Voir plus d'entreprises utilisant Canyon",
  featureList: [
    {
      title: "Pile technologique front-end moderne",
      description:
        "Prend en charge les compilateurs tels que babel et swc, et les outils de packaging tels que webpack et vite.",
    },
    {
      title: "Diff√©rentes m√©thodes de collecte",
      description:
        "Fournit des solutions de collecte de couverture pour les outils de test d'automatisation d'interface utilisateur tels que playwright, et fournit un plugin Chrome pour la collecte de couverture des tests manuels.",
    },
    {
      title: "Donn√©es de couverture pr√©cises",
      description:
        "Par des moyens tels que les plugins babel, collecte les donn√©es de couverture initiale participant √† la compilation pour rendre les donn√©es de couverture plus pr√©cises.",
    },
    {
      title: "Facile √† d√©ployer",
      description:
        "La pile technologique Canyon est enti√®rement bas√©e sur nodejs. Elle fournit √©galement une image Docker pour un d√©ploiement facile.",
    },
    {
      title: "Haute performance et haute disponibilit√©",
      description:
        "Face aux sc√©narios de tests d'automatisation d'interface utilisateur √† haute concurrence et avec une grande quantit√© de donn√©es, gr√¢ce √† la file d'attente int√©gr√©e, elle peut s'adapter √† l'expansion horizontale et verticale de l'environnement de cluster moderne.",
    },
    {
      title: "Int√©gration CI/CD",
      description:
        "En d√©tectant les variables de pipeline via les plugins babel et en collectant la couverture via le rapporteur, elle peut √™tre int√©gr√©e dans le pipeline CI/CD et les donn√©es de couverture peuvent √™tre collect√©es √† l'√©tape CI.",
    },
  ],
  featuresDesc: "Instrumentation facile, collecte pratique",
  frequentlyAskedQuestions: "Questions fr√©quentes",
  faqs: [
    {
      question: "Quels frameworks et piles technologiques sont pris en charge?",
      answer:
        "Prend en charge les compilateurs tels que babel et swc, et les outils de packaging tels que webpack et vite.",
    },
    {
      question:
        "La collecte de couverture pour nodejs est-elle prise en charge?",
      answer:
        "Collecte principalement les donn√©es de couverture des tests end-to-end et des tests UT. Pour nodejs, il peut √™tre instrument√© par nyc puis les donn√©es de couverture peuvent √™tre collect√©es via l'interface API de canyon.",
    },
    {
      question: "Est-il possible sans instrumentation?",
      answer:
        "Apr√®s de nombreuses v√©rifications, les donn√©es de couverture avec instrumentation pendant la compilation sont plus pr√©cises.",
    },
    {
      question:
        "Pourquoi mes donn√©es de couverture sont-elles la couverture du typescript compil√©?",
      answer:
        "Vous pouvez activer l'option sourceMap de tsconfig.json pour collecter les donn√©es de couverture du code source typescript.",
    },
    {
      question: "Comment obtenir un soutien technique ou de l'aide?",
      answer:
        "Si vous rencontrez des probl√®mes lors de l'utilisation, veuillez nous contacter via GitHub @zhangtao25.",
    },
  ],
};
